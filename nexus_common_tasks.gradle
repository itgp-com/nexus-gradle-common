ext {
    // Optional parameters with default values
    //-----------------------------------------------
    // Directory containing the SCSS files
    // scssDir = 'src/main/browser/scss'
    // or
    // scssDir = file('src/main/browser/scss')
    //-----------------------------------------------
    // Output directory for the compiled CSS files
    // cssOutputDir = 'src/main/browser/public/css'
    // or
    // cssOutputDir = file('src/main/browser/public/css')
    //-----------------------------------------------
    // Specific SCSS files to compile
    // scssFilesToCompile = ['theme_material_dark.scss'] // List of files
    // or
    // scssFilesToCompile = 'file1.scss' // Single file
}

/**
 * Task to compile SCSS files to CSS.
 * <p>
 * This task performs the following:
 * <ul>
 *   <li>Defines the directories containing the SCSS files and the compiled CSS files.</li>
 *   <li>Deletes the output directory and all its contents.</li>
 *   <li>Ensures the output directory is recreated as empty before continuing.</li>
 *   <li>Compiles the SCSS files to CSS, only if the corresponding CSS file does not exist or is older than the SCSS file.</li>
 * </ul>
 * </p>
 * <p>
 * The task accepts optional parameters defined in the ext block:
 * <ul>
 *   <li><code>scssDir</code>: The directory containing the SCSS files (can be a String or File).</li>
 *   <li><code>cssOutputDir</code>: The directory for the compiled CSS files (can be a String or File).</li>
 *   <li><code>scssFilesToCompile</code>: Specific files in the SCSS directory to compile (can be a String or List of files).</li>
 * </ul>
 * If these parameters are not defined, the task uses default values.
 * </p>
 */
task compileScss {
    description = 'Compile SCSS to CSS'
    group = 'build'

    doLast {
        int build = 00001
        logger.error "Build number '${build}' running."

        // Define the directory containing the SCSS files
        File scssDir = project.hasProperty('scssDir') ? (project.scssDir instanceof File ? project.scssDir as File : file(project.scssDir)) : file('src/main/browser/scss')
        // Define the output directory for the compiled CSS files
        File outputDir = project.hasProperty('cssOutputDir') ? (project.cssOutputDir instanceof File ? project.cssOutputDir as File : file(project.cssOutputDir)) : file('src/main/browser/public/css')


        // Delete the directory and all its contents
        outputDir.deleteDir()
        logger.error "'${outputDir.name}' output folder cleared."

        // Ensure the output directory exists
        outputDir.mkdirs()

        //-----------
        // Get the list of SCSS files in the scssDir
        def scssFiles = scssDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith('.scss')
            }
        })

        //-----------

        int exitValue = 0

        // Get the files to compile from the ext property or use all SCSS files in the directory
        def filesToCompile = project.hasProperty('scssFilesToCompile') ? project.scssFilesToCompile : scssDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith('.scss')
            }
        })

        // Ensure filesToCompile is a list
        if (filesToCompile instanceof String || filesToCompile instanceof File) {
            filesToCompile = [filesToCompile]
        }

        // Iterate over the SCSS files to compile
        filesToCompile.each { Object folderEntry ->
            // If scssFile is a string, convert it to a File object
            if (folderEntry instanceof String) {
                folderEntry = new File(scssDir, folderEntry)
            }
            File scssAsFile = folderEntry as File;

            // Define the output CSS file path
            def cssFile = new File(outputDir, scssAsFile.name - '.scss' + '.css')

            // Check if the CSS file does not exist or is older than the SCSS file
            if (!cssFile.exists() || scssAsFile.lastModified() > cssFile.lastModified()) {
                // Define the command to run
                def command = ['npx', 'sass', '--load-path=node_modules', '--load-path=node_modules/@syncfusion', folderEntry, cssFile]

                // Execute the command and capture the output
                Process process = command.execute()
                process.waitFor()

                // Capture the standard output and error (this can only be done once)
                String commandOutput = process.in.text
                String commandError = process.err.text
                int localExitValue = process.exitValue()
                if (localExitValue > 0) {
                    exitValue = localExitValue
                }

                if (localExitValue > 0) {
                    // print each error to the console
                    logger.error "Error compiling ${scssAsFile.name} to ${cssFile.name}"
                    logger.error commandError
                } else
                    println "Compiled ${scssAsFile.name} to ${cssFile.name}:"
                if (commandOutput)
                    println commandOutput
            } else {
                logger.error "${scssAsFile.name} compilation is up to date."
            }
        } // each

        if (exitValue > 0)
            throw new GradleException("Error compiling SCSS to CSS. Build failed.")
    }// doLast
}