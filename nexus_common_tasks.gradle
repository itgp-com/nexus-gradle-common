ext {
    // Optional parameters (uses defaults if not defined)
    //-----------------------------------------------
    // Input SCSS files directory
    // scssDir = 'src/main/browser/scss'
    // or
    // scssDir = file('src/main/browser/scss')
    //------
    //
    // Directory for compiled output css files
    // cssOutputDir = 'src/main/browser/public/css'
    // or
    // cssOutputDir = file('src/main/browser/public/css')
    //-----------------------------------------------
    //
    // Specific files in the input SCSS directory to compile
    //scssFilesToCompile = ['theme_material_dark.scss'] // List of files
    // or
    // scssFilesToCompile = 'file1.scss' // Single file

}

task compileScss {
    description = 'Compile SCSS to CSS'
    group = 'build'

    doLast {
        // Define the directory containing the SCSS files
        File scssDir = project.hasProperty('scssDir') ? (project.scssDir instanceof File ? project.scssDir as File : file(project.scssDir)) : file('src/main/browser/scss')
        // Define the output directory for the compiled CSS files
        File outputDir = project.hasProperty('cssOutputDir') ? (project.cssOutputDir instanceof File ? project.cssOutputDir as File : file(project.cssOutputDir)) : file('src/main/browser/public/css')


        // Ensure the output directory exists
        outputDir.mkdirs()

        // clear the output directory of all css files previously there
        outputDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith('.css') || name.endsWith('.map')
            }
        }).each { File cssFile ->
            cssFile.delete()
        } // each

        int exitValue = 0

        // Get the files to compile from the ext property or use all SCSS files in the directory
        def filesToCompile = project.hasProperty('scssFilesToCompile') ? project.scssFilesToCompile : scssDir.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                return name.endsWith('.scss')
            }
        })

        // Ensure filesToCompile is a list
        if (filesToCompile instanceof String || filesToCompile instanceof File) {
            filesToCompile = [filesToCompile]
        }

        // Iterate over the SCSS files to compile
        filesToCompile.each { Object folderEntry ->
            // If scssFile is a string, convert it to a File object
            if (folderEntry instanceof String) {
                folderEntry = new File(scssDir, folderEntry)
            }
            File scssAsFile = folderEntry as File;

            // Define the output CSS file path
            def cssFile = new File(outputDir, scssAsFile.name - '.scss' + '.css')

            // Define the command to run
            def command = ['npx', 'sass', '--load-path=node_modules', '--load-path=node_modules/@syncfusion', folderEntry, cssFile]

            // Execute the command and capture the output
            Process process = command.execute()
            process.waitFor()

            // Capture the standard output and error (this can only be done once)
            String commandOutput = process.in.text
            String commandError = process.err.text
            int localExitValue = process.exitValue()
            if (localExitValue > 0) {
                exitValue = localExitValue
            }

            if (localExitValue > 0) {
                // print each error to the console
                logger.error "Error compiling ${scssAsFile.name} to ${cssFile.name}"
                logger.error commandError
            } else
                println "Compiled ${scssAsFile.name} to ${cssFile.name}:"
            if (commandOutput)
                println commandOutput

        } // each

        if (exitValue > 0)
            throw new GradleException("Error compiling SCSS to CSS. Build failed.")
    }// doLast
}